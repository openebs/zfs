stages:
  - build
  - baseline

build-cstor-0:
   stage: build
   only:
     refs:
       - /^(v[0-9][.][0-9][.]x|develop)?$/
   before_script:
     - echo $HOME
     - export BRANCH=${CI_COMMIT_REF_NAME}
     - echo $BRANCH
     - export COMMIT=${CI_COMMIT_SHORT_SHA}
     - echo $FIO_SRCDIR
     - apt-get update
     - apt-get install --yes sudo git-core
     - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
     - sudo apt-get update -qq
     - sudo apt-get install --yes -qq gcc-6 g++-6
     - sudo apt-get install --yes -qq build-essential autoconf libtool gawk alien fakeroot linux-headers-$(uname -r) libaio-dev
     - sudo apt-get install --yes -qq zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libssl-dev libjson-c-dev
     - sudo apt-get install --yes -qq lcov libjemalloc-dev libelf-dev net-tools bc kmod linux-modules-4.15.0-1025-gcp
  # packages for tests
     - sudo apt-get install --yes -qq parted lsscsi ksh attr acl nfs-kernel-server fio
     - sudo apt-get install --yes -qq libgtest-dev cmake
  # packages for debugging
     - sudo apt-get install --yes gdb
  # use gcc-6 by default
     - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
     - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-6 /usr/bin/g++
     - echo "CSTOR"
     - echo $COMMIT
     - pushd .
     - cd /usr/src/gtest
     - sudo cmake CMakeLists.txt
     - sudo make -j4
     - sudo cp *.a /usr/lib
     - popd
     - cd ..
  # we need fio repo to build zfs replica fio engine
     - git clone https://github.com/axboe/fio
     - cd fio
     - git checkout fio-3.7
     - ./configure
     - sudo make -j4
     - cd ..
     - git clone https://github.com/openebs/spl
     - cd spl
     - git checkout spl-0.7.9
     - sudo sh autogen.sh
     - ./configure
     - cd ..
     # Build libcstor for uzfs feature
     - git clone https://github.com/openebs/libcstor.git
     - cd libcstor
     - sh autogen.sh
     - ./configure --enable-debug --with-zfs-headers=$PWD/../cstor/include --with-spl-headers=$PWD/../cstor/lib/libspl/include
     - sudo make -j4
     - sudo make install
     - sudo ldconfig
     # return to cstor code
     - sh autogen.sh
   script: 
    - make -j4
    - cd ../cstor
    - sh autogen.sh
    - echo $PWD
    - ./configure --with-config=user --enable-code-coverage=yes --enable-debug --enable-uzfs=yes --with-jemalloc --with-fio=$PWD/../fio --with-libcstor=$PWD/../libcstor/include
    - make -j4
    - make cstyle
    - export FIO_SRCDIR=$PWD/../fio
    - echo $FIO_SRCDIR
#    - sudo bash ./print_debug_info.sh &
#    - bash ./tests/cbtest/script/test_uzfs.sh -T all
    - ./build_image.sh

build-cstor-1:
   stage: build
   only:
     refs:
       - /^(v[0-9][.][0-9][.]x|develop)?$/
   before_script:
     - echo $HOME
     - export BRANCH=${CI_COMMIT_REF_NAME}
     - echo $BRANCH
     - export COMMIT=${CI_COMMIT_SHORT_SHA}
     - echo $FIO_SRCDIR
     - apt-get update
     - apt-get install --yes sudo git-core
     - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
     - sudo apt-get update -qq
     - sudo apt-get install --yes -qq gcc-6 g++-6
     - sudo apt-get install --yes -qq build-essential autoconf libtool gawk alien fakeroot linux-headers-$(uname -r) libaio-dev
     - sudo apt-get install --yes -qq zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libssl-dev libjson-c-dev
     - sudo apt-get install --yes -qq lcov libjemalloc-dev libelf-dev net-tools bc kmod linux-modules-4.15.0-1025-gcp
  # packages for tests
     - sudo apt-get install --yes -qq parted lsscsi ksh attr acl nfs-kernel-server fio
     - sudo apt-get install --yes -qq libgtest-dev cmake
  # packages for debugging
     - sudo apt-get install --yes gdb
  # use gcc-6 by default
     - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
     - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-6 /usr/bin/g++
     - echo "CSTOR"
     - echo $COMMIT
     - pushd .
     - cd /usr/src/gtest
     - sudo cmake CMakeLists.txt
     - sudo make -j4
     - sudo cp *.a /usr/lib
     - popd
     - cd ..
     # we need fio repo to build zfs replica fio engine
     - git clone https://github.com/axboe/fio
     - cd fio
     - git checkout fio-3.7
     - ./configure
     - sudo make -j4
     - cd ..
     - git clone https://github.com/openebs/spl
     - cd spl
     - git checkout spl-0.7.9
     - sudo sh autogen.sh
     - ./configure
     - make --no-print-directory -s pkg-utils pkg-kmod
     - sudo dpkg -i *.deb
     - cd ..
     # Build libcstor for uzfs feature
     - git clone https://github.com/openebs/libcstor.git
     - cd libcstor
     - sh autogen.sh
     - ./configure --enable-debug --with-zfs-headers=$PWD/../cstor/include --with-spl-headers=$PWD/../cstor/lib/libspl/include
     - sudo make -j4
     - sudo make install
     - sudo ldconfig
     # return to cstor code
     - cd ../cstor
   script:
     - sh autogen.sh
     - ./configure --enable-code-coverage=yes --enable-debug
     - make --no-print-directory -s pkg-utils pkg-kmod
     - sudo dpkg -i *.deb
     - make cstyle
     - sudo /sbin/modprobe zfs
     - /sbin/ztest

baseline-image:
  stage: baseline
  only:
    refs:
      - /^(v[0-9][.][0-9][.]x|develop)?$/
  image: atulabhi/kops:v10
  before_script: []  
  script:
     - pwd
     - apt-get update
     - apt-get install --yes git-core
     - git config --global user.name "OpenEBS CI Bot"
     - git config --global user.email openebscibot@openebs.io
     - export BRANCH=${CI_COMMIT_REF_NAME}
     - echo $BRANCH
     - export COMMIT=${CI_COMMIT_SHORT_SHA}
     - echo $COMMIT
     - git clone https://github.com/$REPO/e2e-infrastructure.git
     - if [[ "$BRANCH" == "develop" ]] ; then git checkout master ; else git checkout $BRANCH ; fi
     - cd e2e-infrastructure/baseline
     - ansible-playbook commit-writer.yml --extra-vars "branch=$BRANCH repo=$CI_PROJECT_NAME commit=$COMMIT"
     - git status
     - git add baseline
     - git status
     - git commit -m "updated $CI_PROJECT_NAME commit:$COMMIT"
     - git push  https://$user:$pass@github.com/$REPO/e2e-infrastructure.git --all
     - if [[ "$BRANCH" == "develop" ]] ; then export INFRA="master" ; else export INFRA=$BRANCH ; fi
     - curl -X POST -F variable[INFRA_BRANCH]=$INFRA -F token=$PACKET -F ref=k8s-ultimate https://gitlab.openebs.ci/api/v4/projects/27/trigger/pipeline
     - curl -X POST -F variable[INFRA_BRANCH]=$INFRA -F token=$PACKET -F ref=k8s-penultimate https://gitlab.openebs.ci/api/v4/projects/27/trigger/pipeline
     - curl -X POST -F variable[INFRA_BRANCH]=$INFRA -F token=$PACKET -F ref=k8s-antepenultimate https://gitlab.openebs.ci/api/v4/projects/27/trigger/pipeline
